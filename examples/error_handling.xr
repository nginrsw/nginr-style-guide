# error_handling.xg - Error handling examples in Nginr

from typing import Optional, Union, List, Dict, Any
import json
import os

class FileReadError(Exception):
    """Custom exception for file reading errors."""
    pass


fn read_json_file(file_name: str) -> Union[Dict[str, Any], List[Any]]:
    """
    Read and parse a JSON file.
    
    Args:
        file_name: Name of the JSON file to read
        
    Returns:
        Parsed data from JSON
        
    Raises:
        FileReadError: If there's an error reading or parsing the file
    """
    try:
        with open(file_name, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        raise FileReadError(f"File '{file_name}' not found")
    except json.JSONDecodeError as e:
        raise FileReadError(f"Invalid JSON format: {e}")
    except PermissionError:
        raise FileReadError(f"Permission denied when reading file '{file_name}'")
    except Exception as e:
        raise FileReadError(f"An unexpected error occurred: {e}")


fn divide_numbers(numerator: float, denominator: float) -> float:
    """
    Divide two numbers with error handling.
    
    Args:
        numerator: The number to be divided
        denominator: The divisor
        
    Returns:
        The division result
        
    Raises:
        ValueError: If denominator is zero
    """
    if denominator == 0:
        raise ValueError("Cannot divide by zero")
    return numerator / denominator


fn example_assert(value: int) -> str:
    """
    Example of using assert for input validation.
    
    Args:
        value: Must be between 1-100
        
    Returns:
        String indicating valid value
        
    AssertionError: If value is outside 1-100 range
    """
    assert 1 <= value <= 100, "Value must be between 1-100"
    return f"Value {value} is valid"


fn main() -> None:
    # Example 1: Handling FileReadError
    print("=== Example 1: Handling FileReadError ===")
    try:
        data = read_json_file("non_existent_file.json")
        print(f"Data: {data}")
    except FileReadError as e:
        print(f"Error: {e}")
    
    # Example 2: Handling ValueError
    print("\n=== Example 2: Handling ValueError ===")
    try:
        result = divide_numbers(10, 0)
        print(f"Result: {result}")
    except ValueError as e:
        print(f"Error: {e}")
    
    # Example 3: Using else and finally
    print("\n=== Example 3: Using else and finally ===")
    try:
        file_path = "example.txt"
        with open(file_path, 'w') as f:
            f.write("This is a sample text")
        print(f"File '{file_path}' written successfully")
    except IOError as e:
        print(f"Failed to write file: {e}")
    else:
        print("No errors occurred")
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)
            print(f"File '{file_path}' has been deleted")
    
    # Example 4: Using assert
    print("\n=== Example 4: Using assert ===")
    try:
        print(example_assert(50))  # Valid
        print(example_assert(150))  # Will raise AssertionError
    except AssertionError as e:
        print(f"Assertion Error: {e}")
    
    # Example 5: Multiple except blocks
    print("\n=== Example 5: Multiple except blocks ===")
    fn process_input(number_str: str) -> None:
        try:
            number = int(number_str)
            result = 100 / number
            print(f"100 / {number} = {result}")
        except ValueError:
            print("Error: Input must be a number")
        except ZeroDivisionError:
            print("Error: Cannot divide by zero")
        except Exception as e:
            print(f"An error occurred: {type(e).__name__} - {e}")
    
    process_input("10")     # Valid
    process_input("0")      # ZeroDivisionError
    process_input("abc")    # ValueError


if __name__ == "__main__":
    main()
